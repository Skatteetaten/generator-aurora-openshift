info:
    serviceLinks:
        api-doc: ${route.name}/docs/index.html
    auroraVersion: ${aurora.version:local-dev}
    imageBuildTime: ${image.build.time:}

aurora:

    <% if (oracle) { %>
    #setting a db here will create a datasource from a database with that name.
    #in AOC config file
    db: <%=dbName%> <% }
    if (controllerExample) { %>
    client:
        metricsPathLabelGroupings:
            httpbin: ".*httpbin.org.*"
     <% } %>


spring:
  profiles:
    active: local<% if (reactive) { %>
  application:
    name: ${pod.name:<%=consumerGroup%>}
  cloud:
    stream:
      kafka:
        binder:
          zkNodes: <%=zookeeper%>
          brokers: <%=kafka%>
      default:
        group: <%=consumerGroup%>
      bindings:
        <% if (kafkaSink) { %>output:
          destination: <%=topicWrite%>
        loggingIn:
          destination: <%=topicWrite%><% } %>
        <% if (kafkaSource) { %>input:
          destination: <%=topicRead%>
        loggingErr:
          destination: error.<%=topicRead%>.<%=consumerGroup%><% } %>
<% } %>
logging:
    level:
      ske.aurora: INFO
      no.skatteetaten.aurora: INFO
      org:
        <% if (reactive) { %>apache: ERROR<% } %>
        apache.catalina: WARN
        springframework: WARN
        hibernate: WARN

---
spring:
  profiles: local
  <% if (oracle) { %>
  datasource:
    # id: 02150c29-6ab9-4917-bd56-1ba63d4f46d5"
    url: jdbc:oracle:thin:@uil0map-drivein-db02:1521/dbhotel
    username: MFBDNLMIQTWTWNWEQOMLPAAPJDKSYV
    password: qWieNxGpdFcjVOHPiaCTcmJqYdgYkk
 <% } %>

  <% if (reactive) { %>
  # you have to download kafka 0.10.1 and start it and zookeeper at standard paths. Follow instructions in readme"
  cloud:
    stream:
        kafka:
          binder:
            zkNodes: localhost
            brokers: localhost
   <% } %>

logging:
    pattern:
      console: "%date{HH:mm:ss.SSS} [%-9.9thread] %highlight(%-5level) %cyan(%logger{15}):%line %X - %msg %n%rEx{full}"
